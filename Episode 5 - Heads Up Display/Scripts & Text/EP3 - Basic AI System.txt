--- INTRO ---

[Fade in Gameplay of a Tournament fighter]
Hello everybody, 
my name is Kellin from KindoSaur Productions and today we will continue the Tournament Fighter series with a difficult 
subject: the AI.

It is something that isn't that hard to understand merely because it isn't that complicated to figure out that 
the target is the player and that it needs to choose what the best next action is,
like throwing a punch or wait for the player to come closer. 

No! the difficulty comes from the actual implementation of these actions as you've
got multiple systems to choose from, which can either help you or might in the end bite back because you wrote a 
system too loose or too specific for a scenario. Not only is it a system where you will need to keep in mind that it has different states.
Think about the difficulty settings and or type differences because you can play against different characters.
But there are also some extra catches like: Will the AI base its attacks on distance between the player and itself
or is the current health of the AI going to do that? 
Or even in the case of Capcoms Street Fighter: Will it use the players input to determine if it is going to counter
that attack or choose a more defensive action?
I read somewhere that the system behind it was able to see the action made
by the players eventhough this was one or two frames before it was being performed on screen

All of these systems can become really messy if you don't take good care and thought into it and let me tell you
IT CAN!

[Getting blurry]

As always I would also like to mention that if you have spotted something to optimize inside of my code to let it be known.
As I always say in my videos we are here to help eachother and share our knowledge. 
This is also the case if you yourself have any questions, please let me and the rest of us know 
that you are stuck on something and could use some help.

OK, now that that is said lets dive into todays tutorial:

[Fade out]

--- PART 1: CHANGES ---
Since the last video there have been some changes made, for instance:

The bug where the player couldn't really throw a crouched punch has been fixed. 
The way I did that was by adding another if statement inside of _send_combo_attempt, this if-statement
will check if there were only 2 inputs made and also if these were the buttons used to do this combo.
If this isn't the case and there was only 1 input made, try to see if it was the punch key and play that animation. 

I also changed some of my animations because most of them had sprites which had a huge offset to the 
parent position (aka the Kinematicbody). And since we are working with AI it is best to make sure that everything 
is visually correct as well.

Lastly I changed the players script a bit more so that it allows horizontal movement just as in Street Fighter.
- To do this we will add a variable to the top called movementSpeed and give it the value of 100 

- We then make a small function called _move_player() which will need 1 variable to work, 
	a moveDirection
- Inside of this function we will need to make a new Vector2 and call it velocity.
	Since this is a tournament fighter game we only want to update the X position of the velocity.
	The value that comes out of this is made out of the direction of movement * the speed we want
- Lastly we will set velocity to MoveAndSlide and within its parameters place velocity again
The only thing left to do is checking for inputs and also giving the move_player function the correct values.

If you test this now you'll see that Ryu is able to move eventhough he is performing an Action or is prepping to make 
a Combo. This is not what you would like to see during a play session so let's go and fix that. 

We make a simple boolean, called canMove, at the top of the player Script.
We then make a function which can change this new boolean from true to false and back.

Sadly we don't have an exact input to call this function within this script. So that's why we head to the animationPlayer.
In case you didn't know, this node allows you to not only keep track of standard animations settings but also functions calls.
You only need to click on "Add Track" > and than on "Call Method Track" > you than need to right click onto this track to 
create a new key and select the function you want to call.
When this Key is made you can now click on it and go inside the "Arguments" list. In here we want to send a bool value towards
our function. Click on the box of "Type" and fill in if it is on or not.
Do this for all of your animations.

Keep in mind that the player can move when inside of the Idle state so don't set that to false.

When this is all done we need to encircle the move_player function call inside of the Process function with this 
canMove boolean. 

Now we have gotten the movement down.
 
--- PART 2: THE CODE ---
To make an AI we first need a script that is going to become its brain. So lets make one, I called mine AIScript and I placed
it onto our buddy E Honda here.

Later on in the series this system will get a better brain and will eventually pick more on what to do when its health is at a 
certain point mixed with the distance between it and the player and also what kind of difficulty it is set to.


For now we want to make some small steps. 

Meaning that this script, for now, is going to: "Choose between Attack and Move based on the distance between itself 
and the player". 



For the people following me but using C# let me remind you that there will be a saperated folder on my GitHub soon where you can 
read and follow allong. For now I've catagorised all variables with a comment above, hopefully this helps a bit.

Great now lets make all of the needed variables for today:
- We will be needing 4 integer variables:
	offsetTillFlip	
	AIMovementSpeed
	moveDirection
	and maxDistance
- 4 float variables
	maxMoveTime
	time - which will start with the same value as maxMoveTime
	maxTimeTillChoice
	and countDown - which will start with the same value as maxTimeTillChoice
- 2 Arrays called
	gKeys and sKeys
- 1 Vector2 variable called 
	velocity
- 2 Booleans 
	startMoving 
	and isCrouching both starting at false
- 2 Objects for calling 
	the AnimationTree node and also the player
- And lastly 2 references towards the MoveSetManager Singleton from last time, again asking for the general- and
	specificMoves of the AI this script will be on. 

Thats quite a number of variables, but luckily we also have quite a lot of functions needing them to work.
Here we go:

- First up the _ready function:
	This function will allow the sKeys and gKeys to receive all of the possible combos inside of the generalMoves
	and specificMoves dictionaries of the AI character.
	
	We then set the countDown equal to the maxTimeTillChoice to make sure that it happens correctly

- Next we make the process(delta) function where we grab the countDown variable and -= that by delta
	we then check if countDown has become less than 0 and if so it will call the function choose Action.

- _choose_action will be our biggest function to write today so pay close attention:
	Inside of this function we want to know the AI's chance to perform an Attack on the player.
	It is done by first calculating a percentagePerStep, this will help the AI to figure out how 
	much the percentage the chance will increase and decrease with each step it takes.

	So how do we get to the answer of chance? We need to place down the percentagePerStep and do this 
	times the absolute distance between the players X positon minus the AI's X position.
	
	We use Absolute because we don't want negative percentages that force us to make extra checks.
	Now that we have the chance figure out we need to flip its orientation, because the way it is calculated 
	at the moment it will go higher the further it is from the player. But since we want our chance to be
	connected to the chance of Attack, we want it to be the other way around. The closer the AI is to the player
	the higher the chance. 
	We also want it to be clamped between 10 and 90% since we don't want it to keep choosing attack or move when we
	are close or far away. This can change depending on the difficulty where it can be 40 to 60% on easy and 
	5 to 95% on insane mode.

	Anyway: chance = 100 - clamp(chance, 10, 90) 

	- Now we need a value that is randomly decided and that can be checked. For this we will also write a 
	  function called "_return_value""
		    
		Inside of return value we will make 2 variables: 1 named generator and 1 called value.
		What this small function will do is very simple, choose a number between 0 and 100 and
		store it inside of value, than return value's ... well ... value
	
	Ok, so now that there is a value that can be checked we can finally start with the actual decision making.
	
	If the value is equal or less than chance it is considered an Attack and a new variable called randomAttack
	is made, also another value called attackValue is made to again store the outcome.
	inside of attackValue it will choose between 0 and all the possible moves the AI can perform including 
	IDLE and CROUCHED IDLE.
	
	It will then decide if the value coming out of the attackValue is lower than the amount of specific combos
	the AI can perform. If this value is higher than that, a generalMove is going to be performed.
	
	But if the value from the function return_value is more than the chance's outcome, the value is considered
	to be a movement.
	This will set startMoving to be true, time to be equal to maxMoveTime, the animTree to play the IDLE animation
	and call a function to set isCrouching to be false.   
	
	After this the countDown will be reset.

	This _crouch() function is the same as the one seen inside of the playerMovementScript. But is made
	to prevent the AI from moving when the crouch animation is being played.
	 
- Now lets head back to the _process(delta) function where we now need to call a simple function that allows the
	AI to flip when it passes the player position. This function will be called _face_player().
	All we have to do is make a temp variable called distanceToPlayer and calculate the distance between 
	the player and the AI on the X axis. As you can see we are not using the Absolute in this calculation
	because we now actually want to know if the outcome is positive or negative.   

	Inside of this function we also update the moveDir which can be used for when we want to move the AI.
	
- Ok the last thing that needs to be added inside of the Process(delta): is the move_AI function
	there we do the same as to what we did in the PlayerMovementScript.

--- PART 3: OUTRO ---	
If all went well you should end up with a Script that is capable of figuring out what to do when it is near a 
player and is also able to move around and stop when it is very close to the player. 
I would like to mention again that the AI we created today is very basic but will be expanded upon with each video.

As there is quite a lot I want to add and do with this system.

Anyway my name is Kellin from KindoSaur Productions and thank you very much for watching todays tutorial.
See you next time, bye bye!
 

 

	  





 

   

  